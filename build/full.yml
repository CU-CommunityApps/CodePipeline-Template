AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ''

Parameters:

  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
  
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'
    
  GitHubRepo:
    Description: 'The GitHub repository for this application'
    Type: 'String'
  
  AdminEmail:
    Description: 'Email to which administrative alerts are sent'
    Type: 'String'
  
  AdminPhone:
    Description: 'Mobile phone to which administrative alerts are sent via SMS'
    Type: 'String'

Outputs:

  BuildBucket:
    Value: !Sub '${BuildBucket}'
    
  BuildProject:
    Value: !Sub '${BuildProject}'

Globals:
  
  Function:
    Handler: 'entry.lambda_handler'
    MemorySize: 128
    Runtime: 'python3.7'
    Timeout: 900
    Tags:
      Application: !Sub '${Application}'
      Environment: !Sub '${Environment}'
    Environment:
      Variables:
        APPLICATION: !Sub '${Application}'
        ENVIRONMENT: !Sub '${Environment}'
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        
Resources:

  # Batch 

  BatchServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'batch.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBatchServiceRole'

  SpotFleetServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'spotfleet.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole'

  BatchInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ec2.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'

  BatchInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Sub '${BatchInstanceRole}'

  # Containers
  
  ContainerRepo:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryPolicyText

  # Functions
  
  # Function:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: './lambdas/'
  #     Tags:
  #       Resource: !Sub '${Application}--function'
  #     Policies:
  #       - 'AWSLambdaBasicExecutionRole'
  #       - Version: '2012-10-17'
  #         Statement:
  #           - Effect: 'Allow'
  #             Action:
  #               - ''
  #             Resource:
  #               - !Sub ''

  # Compute
  
  ComputeStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: './compute.yml'
      Parameters:
        Application: !Sub '${Application}'
        Environment: !Sub '${Environment}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-compute-stack'

  # CodeBuild Project

  BuildBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: 'daily-cleanup'
            Status: 'Enabled'
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 1
            NoncurrentVersionExpirationInDays: 1
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-build-bucket'

  BuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
  
  BuildLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${BuildProject}'
      
  BuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: 'NO_ARTIFACTS'
      ServiceRole: !Sub '${BuildRole.Arn}'
      Source:
        Location: !Sub '${GitHubRepo}'
        Type: 'GITHUB'
        GitCloneDepth: 0
        BuildSpec: 'build/buildspec.yml'
        Auth:
          Type: 'OAUTH'
      Triggers:
        Webhook: true
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/python:3.7.1'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'STACK_NAME'
            Value: !Sub '${AWS::StackName}'
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'GITHUB_REPO'
            Value: !Sub '${GitHubRepo}'
          - Name: 'ADMIN_EMAIL'
            Value: !Sub '${AdminEmail}'
          - Name: 'ADMIN_PHONE'
            Value: !Sub '${AdminPhone}'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-build-project'
