AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Standard VPC Template'

Parameters:
  
  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
    
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'

  BuildRole:
    Description: 'ARN of the CodeBuild Role'
    Type: 'String'

  CloudFormationDeployRole:
    Description: 'The IAM Role used by CloudFormation to deploy this stack'
    Type: 'String'

Outputs:

  # ECS Environment
  
  EcsCluster:
    Value: !Sub '${EcsCluster}'

  EcsRepository:
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}'
  
  ExampleService:
    Value: !Sub '${ExampleService}'

Resources:

  DeployPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${Application}-${Environment}-compute-deploy-policy'
      Roles:
        - !Sub '${CloudFormationDeployRole}'
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'ec2:*'
                - 'ecs:*'
                - 'ecr:*'
                - 'iam:RemoveRoleFromInstanceProfile'
              Resource:
                - '*'

  # Container Definitions
  
  ExampleTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-example-task-role'
  
  ExampleFargateDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !Sub '${EcsTaskExecutionRole.Arn}'
      TaskRoleArn: !Sub '${ExampleTaskRole.Arn}'
      RequiresCompatibilities:
        - 'FARGATE'
      ContainerDefinitions:
        - Name: 'example'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}:example'
          Essential: true
          Command: ['python3', '-m', '80']
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Sub '${EcsLogGroup}'
              awslogs-stream-prefix: 'example'
          MountPoints:
            - SourceVolume: 'efs'
              ContainerPath: '/efs'
          Environment:
            - Name: 'APPLICATION'
              Value: !Sub '${Application}'
            - Name: 'ENVIRONMENT'
              Value: !Sub '${Environment}'
            - Name: 'AWS_REGION'
              Value: !Sub '${AWS::Region}'
            - Name: 'AWS_DEFAULT_REGION'
              Value: !Sub '${AWS::Region}'
      Volumes:
        - Name: 'efs'
          EFSVolumeConfiguration:
            FilesystemId: !Sub '${FileSystem}'
            TransitEncryption: 'ENABLED'
            AuthorizationConfig:
              AccessPointId: !Sub '${EfsAccessPoint}'
              IAM: 'DISABLED'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'example-fargate-definition'

  ExampleService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Sub '${EcsCluster}'
      LaunchType: 'FARGATE'
      PlatformVersion: '1.4.0'
      PropagateTags: 'SERVICE'
      TaskDefinition: !Sub '${ExampleFargateDefinition}'
      # LoadBalancers:
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Sub '${Vpc.DefaultSecurityGroup}'
          Subnets:
            - !Sub '${SubnetA}'
            - !Sub '${SubnetB}'
            - !Sub '${SubnetC}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'example-ecs-service'

  # ECS Environment

  EcsCluster:
    Type: 'AWS::ECS::Cluster'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      ClusterName: !Sub '${Application}-${Environment}'
      ClusterSettings: 
        - Name: 'containerInsights'
          Value: 'enabled'
      Tags: 
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-cluster'

  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'ecs-task-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub '${EcsLogGroup.Arn}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-task-execution-role'

  EcsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      LogGroupName: !Sub '/${Application}/${Environment}/ecs'
      RetentionInDays: 14

  EcsRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub '${Application}-${Environment}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 
                - !Sub '${EcsTaskExecutionRole.Arn}'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
          - Effect: 'Allow'
            Principal:
              AWS: !Sub '${BuildRole}'
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DescribeImages'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
      LifecyclePolicy:
        LifecyclePolicyText: |-
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1,
                  "tagStatus": "untagged"
                },
                "description": "Expire Untagged Images",
                "rulePriority": 1
              }
            ]
          }
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-respository'

  # EFS
  
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: 'generalPurpose'
      ThroughputMode: 'bursting'
      FileSystemTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'filesystem'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'

  EfsAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      AccessPointTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'efs-access-point'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'

  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetA}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetB}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetC:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetC}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  # VPC

  Vpc:
    Type: 'AWS::EC2::VPC'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'vpc'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'igw'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Sub '${InternetGateway}'
      VpcId: !Sub '${Vpc}'

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'rtb'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Sub '${InternetGateway}'
      RouteTableId: !Sub '${RouteTable}'
  
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: '10.0.0.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-a'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-a'
  
  SubnetRouteA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetA}'
  
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: '10.0.32.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-b'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-b'
  
  SubnetRouteB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetB}'
  
  SubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 2
          - Fn::GetAZs: ''
      CidrBlock: '10.0.64.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-c'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-c'
  
  SubnetRouteC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetC}'
  